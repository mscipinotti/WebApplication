@using Microsoft.AspNetCore.Mvc.Localization
@using WebApp.Infrastructure.Models.dto
@using WebAPP.Infrastructure.Models.enums
@using System.Globalization
@using WebAPP.Infrastructure.Utilities;
@inject IViewLocalizer localizer
@inject IConfiguration Config
@model BiographyDto

<article class="w-100">
    <input type="hidden" asp-for="@Model.Id" />
    <input type="hidden" asp-for="@Model.Author.Name" />
    <input type="hidden" asp-for="@Model.Author.Surname" />
    <input type="hidden" name="MandatoryField" value="@localizer["MandatoryField"]" />
    <div class="d-flex flex-row">
        <div class="p-2 d-flex flex-column">
            <img src="~/Images/leaves.jpg" alt="Immagine dell'autore" />
            <div read>
                <input type="hidden" asp-for="@Model.Author.Id" />
                <input type="hidden" asp-for="@Model.Author.FC" />
                <div><b>@localizer["BirthDay"]</b><br /><input asp-for="@Model.Author.BirthDay" class="border-0" readonly /></div>
                <div><b>Email</b><br /><input type="email" asp-for="@Model.Author.Email" class="border-0" readonly /></div>
                <div><b>@localizer["WorkPlace"]</b><br /><textarea asp-for="@Model.Author.WorkPlace" class="border-0" readonly></textarea></div>
                <div><b>@localizer["WorkAddress"]</b><br /><textarea asp-for="@Model.Author.WorkAddress" class="border-0" readonly></textarea></div>
                <div><b>@localizer["Nationality"]</b><br /><input asp-for="@Model.Author.Nationality" class="border-0" readonly /></div>
            </div>
        </div>
        <div class="d-flex flex-column w-100">
            <div class="p-2">
                <h3>
                    <input type="hidden" asp-for="@Model.Author.Id" />
                    @if (Model.Author.Title is not null)
                    {
                        <input type="hidden" asp-for="@Model.Author.Title!.Id" />
                        <input type="hidden" asp-for="@Model.Author.Title!.Description" />
                        @Model.Author.Title!.Description
                    }
                    &nbsp;@Model.Author.Name
                    &nbsp;@Model.Author.Surname
                </h3>
            </div>
            <div class="p-2">
                @* .AspNetCore.Culture è il nome di default assegnato al cookie del locale scelto *@
                <p id="pText"><textarea class="border-0 w-100" asp-for="@Model.Text" readonly value="@Model.Text" spellcheck="false"></textarea>
                              <input type="hidden" id="initialText" value="@Model.Text" /></p>
                @if(Model.Profile != ProfileItems.User)
                {
                    <div class="d-flex flex-row-reverse">
                        <button name="btnTextModify" type="button" class="btn btn-link text-decoration-none">@localizer["Modify"]</button>
                        <button name="btnTextUndo" type="button" hidden class="btn btn-link text-decoration-none">@localizer["Undo"]</button>
                        <button name="btnTextSave" asp-controller="Operator" asp-action="UpdateBiography" hidden type="submit" class="btn btn-link text-decoration-none" data-toggle="modal" data-target="#modalRequest">@localizer["Save"]</button>
                    </div>
                }
            </div>
            <div class="p-2"><h4>@localizer["Responsibility"]</h4></div>
            <div class="p-2">
                <div class="row w-100 text-center">
                    <div class="col-md-2"><b>@localizer["From"]</b></div>
                    <div class="col-md-2"><b>@localizer["To"]</b></div>
                    <div class="col-md-8"><b>@localizer["Description"]</b></div>
                </div>
                <ol id="oResponsibilities" class="nav list-group list-group-numbered">
                    @{
                        int index = 0;
                        foreach (var r in Model.Responsibilities)
                        {
                            <li class="row w-100 py-1">
                                @if (r.From is not null)
                                    {
                                        <input type="hidden" asp-for="@Model.Responsibilities[index].ToDelete" value="@r.ToDelete" />
                                        <input type="hidden" asp-for="@Model.Responsibilities[index].Id" value="@r.Id" />
                                        <div class="col-md-2">
                                            <input asp-for="@Model.Responsibilities[index].From" class="px-2 slimInputText datepicker" style="cursor:grab" required readonly value="@r.From" />
                                            <span class="invalid-feedback" name="feedback.Responsibilities[@index].From"></span>
                                            <input type="hidden" id="oResponsibilities[@index].From" value="@r.From" />
                                        </div>
                                        <div class="col-md-2">
                                            <input asp-for="@Model.Responsibilities[index].To" class="px-2 slimInputText datepicker" style="cursor:grab" readonly value="@r.To" />
                                            <span class="invalid-feedback" name='feedback.Responsibilities[@index].To'></span>
                                            <input type="hidden" id="oResponsibilities[@index].To" value="@r.To" />
                                        </div>
                                        <div class="col-md-8">
                                            <textarea class="border-0 w-100" asp-for="@Model.Responsibilities[index].Description" style="cursor:grab" required readonly value="@r.Description" spellcheck="false"></textarea>
                                            <span class="invalid-feedback" name="feedback.Responsibilities[@index].Description"></span>
                                            <input type="hidden" id="oResponsibilities[@index].Description" value="@r.Description" />
                                        </div>
                                    }
                            </li>
                            index++;
                        }
                    }
                </ol>
                @if (Model.Profile != ProfileItems.User)
                {
                    <div class="d-flex flex-row-reverse">
                        <button name="btnResponsibilityModify" type="button" class="btn btn-link text-decoration-none">@localizer["Modify"]</button>
                        <button name="btnResponsibilityAdd" type="button" class="btn btn-link text-decoration-none">@localizer["Add"]</button>
                        <button name="btnResponsibilityDelete" type="submit" asp-controller="Operator" asp-action="DeleteResponsibility" hidden class="btn btn-link text-decoration-none">@localizer["Delete"]</button>
                        <button name="btnResponsibilityUndo" type="button" hidden class="btn btn-link text-decoration-none">@localizer["Undo"]</button>
                        <button id="btnResponsibilitySave" name="btnResponsibilitySave" type="submit" asp-controller="Operator" asp-action="UpdateBiography" hidden class="btn btn-link text-decoration-none" data-custom-validation="customValidate()">@localizer["Save"]</button>
                    </div>
                }
            </div>
            <div class="p-2"><h4>@localizer["Works"]</h4></div>
            <div class="p-2">
                <div class="row w-100 text-center">
                    <div class="col-md-6"><b>@localizer["Title"]</b></div>
                    <div class="col-md-2"><b>ISBN</b></div>
                    <div class="col-md-2"><b>@localizer["ArchivedSince"]</b></div>
                    <div class="col-md-2"><b>@localizer["PublishDate"]</b></div>
                </div>
                <ol id="oTexts" class="nav list-group list-group-numbered">
                    @{
                        index = 0;
                        foreach (var t in Model.Texts)
                        {
                            <li class="row w-100 py-1">
                                <input type="hidden" asp-for="@Model.Texts[index].Id" value="@t.Id" />
                                <input type="hidden" asp-for="@Model.Texts[index].Archive" value="@t.Archive" />
                                <div class="col-md-6">
                                    <input type="text" asp-for="@Model.Texts[index].ToDelete" hidden value="@t.ToDelete" />
                                    <input type="text" asp-for="@Model.Texts[index].Title" hidden class="px-2 w-100 border-0" />
                                    <a class="px-2 text-decoration-none" href="~/StaticFiles/@(t.Id).pdf" target="_blank">@t.Title</a>
                                </div>
                                <div class="col-md-2">
                                    <input asp-for="@Model.Texts[index].ISBN" class="px-2 slimInputText" style="cursor:grab" readonly value="@(t.ISBN ?? string.Empty)" />
                                    <input type="hidden" id="oTexts[@index].ISBN" value="@t.ISBN" />
                                </div>
                                <div class="col-md-2">
                                    <input asp-for="@Model.Texts[index].Present" class="px-2 slimInputText datepicker" style="cursor:grab" readonly value="@t.Present" />
                                    <span name='feedback.Work[@index].Present' class="invalid-feedback"></span>
                                    <input type="hidden" id="oTexts[@index].Present" value="@t.Present" />
                                </div>
                                <div class="col-md-2">
                                    <input asp-for="@Model.Texts[index].Published" class="px-2 slimInputText datepicker" style="cursor:grab" readonly value="@t.Published" />
                                    <span name='feedback.Work[@index].Published' class="invalid-feedback"></span>
                                    <input type="hidden" id="oTexts[@index].Published" value="@t.Published" />
                                </div>
                            </li>
                            index++;
                        }
                    }
                </ol>
                @if (Model.Profile != ProfileItems.User)
                {
                    <div class="d-flex flex-row-reverse">
                        <button name="btnWorkModify" type="button" class="btn btn-link text-decoration-none">@localizer["Modify"]</button>
                        <button name="btnWorkAdd" type="button" class="btn btn-link text-decoration-none">@localizer["Add"]</button>
                        <button name="btnWorkDelete" type="submit" asp-controller="Operator" asp-action="DeleteWork" hidden class="btn btn-link text-decoration-none">@localizer["Delete"]</button>
                        <button name="btnWorkUndo" type="button" hidden class="btn btn-link text-decoration-none">@localizer["Undo"]</button>
                        <button id="btnWorkSave" name="btnWorkSave" type="submit" asp-controller="Operator" asp-action="UpdateBiography" hidden class="btn btn-link text-decoration-none" data-custom-validation="customValidate()">@localizer["Save"]</button>
                    </div>
                }
            </div>
        </div>
    </div>
</article>

<script type="text/javascript">
    let $allResponsibilityDatepicker = $('#oResponsibilities').find('.datepicker');
    let $allWorkDatepicker = $('#oTexts').find('.datepicker');

    $(function () {
        let modal = waitingDialog.show('waitModal');

        $("[name='btnResponsibilityAdd']").on('click', function () {
            let index = parseInt('@Model.Responsibilities.Count()');
            let row = '<li class="row w-100 py-1">' +
                        '<input type="hidden" id="Responsibilities_' + index + '__Id" name="Responsibilities[' + index + '].Id" />' +
                        '<input type="hidden" id="Responsibilities_' + index + '__ToDelete" name="Responsibilities[' + index + '].ToDelete" />' +
                        '<div class="col-md-2">' +
                            '<input class="px-2 slimInputText datepicker selected" required readonly type="text" id="Responsibilities_' + index + '__From" name="Responsibilities[' + index + '].From" />' +
                            '<span class="invalid-feedback" name="feedback.Responsibilities[' + index + '].From"></span>' +
                        '</div>' +
                        '<div class="col-md-2">' +
                            '<input class="px-2 slimInputText datepicker selected" readonly type="text" id="Responsibilities_' + index + '__To" name="Responsibilities[' + index + '].To" />' +
                        '</div>' +
                        '<div class="col-md-8">' +
                            '<textarea class="border-0 w-100 selected" required spellcheck = "false" id = "Responsibilities_' + index + '__Description" name = "Responsibilities[' + index + '].Description"></textarea>' +
                            '<span class="invalid-feedback" name="feedback.Responsibilities[' + index + '].Description"></span>' +
                        '</div>' +
                     '</li>';

            addRow(index, 'oResponsibilities', row);
        });

        $("[name='btnWorkAdd']").on('click', function () {
            let index = parseInt('@Model.Texts.Count()');
            let row = '<li class="row w-100 py-1">' +
                        '<input type="hidden" id="Texts_' + index + '__Id" name="Texts[' + index + '].Id" />' +
                        '<input type="hidden" id="Texts_' + index + '__ToDelete" name="Texts[' + index + '].ToDelete" />' +
                        '<div class="col-md-6">' +
                            '<input type="text" class="px-2 w-100 border-0 selected" id="Texts_' + index + '__Title" name = "Texts[' + index + '].Title" />' +
                            '<span class="invalid-feedback" name="feedback.Texts[' + index + '].Title"></span>' +
                        '</div>' +
                        '<div class="col-md-2">' +
                            '<input class="px-2 slimInputText selected" type="text" id="Texts_' + index + '__ISBN" name="Texts[' + index + '].ISBN" />' +
                            '<span class="invalid-feedback" name="feedback.Texts[' + index + '].ISBN"></span>' +
                        '</div>' +
                        '<div class="col-md-2">' +
                            '<input class="px-2 slimInputText datepicker selected" readonly type="text" id = "Texts_' + index + '__Present" name = "Texts[' + index + '].Present" />' +
                            '<span class="invalid-feedback" name="feedback.Texts[' + index + '].Present"></span>' +
                        '</div>' +
                        '<div class="col-md-2">' +
                            '<input class="px-2 slimInputText datepicker selected" readonly type="text" id="Texts_' + index + '__Published" name = "Texts[' + index + '].Published" />' +
                            '<span class="invalid-feedback" name="feedback.Texts[' + index + '].Description"></span>' +
                        '</div>' +
                    '</li>';

            addRow(index, 'oTexts', row);
        });

        // Per gestire il caso in cui il DB sia vuoto
        if ($allResponsibilityDatepicker.length == 0)
        {
            let $divButt = $('#btnResponsibilitySave').closest('div');

            hideButtons($divButt);
            $("[name='btnResponsibilityAdd']").removeAttr('hidden', 'slow');
        }
        if ($allWorkDatepicker.length == 0)
        {
            let $divButt = $('#btnWorkSave').closest('div');

            hideButtons($divButt);
            $("[name='btnWorkAdd']").removeAttr('hidden', 'slow');
        }

        $('.datepicker').datepicker('destroy');
        setTimeout(function () { waitingDialog.hide(modal); }, 2000);
    });

    $("[name='btnTextModify']").on('click', function () {
        let $divButt = $(this).closest('div');
        let $textarea = $("#pText > textarea");

        $textarea.removeAttr('readonly', 'slow');
        $textarea.toggleClass('selected', 'slow');
        endButtons($divButt);
        $textarea.trigger('focus');
    });

    $("[name='btnTextUndo']").on('click', function () {
        let $divButt = $(this).closest('div');
        let $textarea = $("#pText > textarea");

        $textarea.attr('readonly', 'slow');
        $textarea.toggleClass('selected', 'slow');
        $textarea.val($('#initialText').val(), 'slow');
        startButtons($divButt);
    })

    $("[name='btnResponsibilityModify']").on('click', function () {
        let $inputField = $('#oResponsibilities li input');
        let $textareaField = $('#oResponsibilities li textarea');
        let $divButt = $('#oResponsibilities').closest('div');

        $inputField.toggleClass('selected', 'slow');
        $textareaField.toggleClass('selected', 'slow');
        $inputField.find(':visible:first').trigger("focus");
        $textareaField.removeAttr('readonly', 'slow');

        endButtons($divButt);

        if ($('#btnWorkSave').is(':hidden')) $allWorkDatepicker.datepicker('destroy');
        setDatepicker('oResponsibilities');

        setFocus($('#oResponsibilities'));
    });

    $("[name='btnResponsibilityUndo']").on('click', function () {
        let index = parseInt('@Model.Responsibilities.Count()');
        let $textareaField = $('#oResponsibilities li textarea');
        $textareaField.removeClass('selected', 'slow');

        undo('oResponsibilities', 'btnWorkSave', index);
    });

    $("[name='btnWorkModify']").on('click', function () {
        let $field = $('#oTexts li input');
        let $aField = $('#oTexts li a');
        let $TitleHidden = $('#oTexts li input[name$="Title"]');
        let $divButt = $('#oTexts').closest('div');

        $aField.hide();
        $field.toggleClass('selected', 'slow');
        $field.css({'cursor': "default"});
        $field.attr("readonly", false);
        $TitleHidden.removeAttr('hidden', 'slow');

        endButtons($divButt);

        if($('#btnResponsibilitySave').is(':hidden')) $allResponsibilityDatepicker.datepicker('destroy');
        setDatepicker('oTexts');

        setFocus($('#oTexts'));
    });

    $("[name='btnWorkUndo']").on('click', function ()
    {
        let index = parseInt('@Model.Texts.Count()');
        let $fieldTitle = $('#oTexts li input').find('[name$="Title"]');
        let $aField = $('#oTexts li a');
        let $TitleHidden = $('#oTexts li input[name$="Title"]');

        $aField.show();
        $fieldTitle.hide('slow');
        $TitleHidden.attr('hidden', 'slow');

        undo('oTexts', 'btnResponsibilitySave', index);
    });

    $('textarea[name$="Description"]').on("click", function () {
        selectWork($(this));
    });

    $('.datepicker').on("click", function () {
        selectWork($(this));
    });

    $('input[name$="ISBN"]').on("click", function () {
        selectWork($(this));
    });

    selectWork = function($this)
    {        
        let $divButt = $this.closest('ol').closest('div');
        let $buttDelete = $divButt.find('button[name$="Delete"]');
        let $buttSaveHidden = $divButt.closest('div').find('button[name$="Save"]').is(':hidden');
        let $parent = $this.closest("li");
        let $toDelete = $parent.find("input:hidden[name$='ToDelete']").val().toLowerCase();

        if ($buttSaveHidden) {
            $parent.find("input").toggleClass('selected', 'slow');
            $parent.find("input:hidden[name$='ToDelete']").val(!JSON.parse($toDelete));
            $parent.find("textarea:visible").toggleClass('selected', 'slow');
            $parent.find("a:visible").toggleClass('selected', 'slow');

            let $selected =  $this.closest('ol')
                                  .find("input[name$='ToDelete']")
                                  .filter(function() { return this.value == 'true'; });
                                  // Per determinare quanti hanno la proprietà dinamica value posta a true non è possibile usare il selettore [value=''] perchè funziona solo per casi statici
            if ($selected.length > 0)
            {
                hideButtons($divButt);
                $buttDelete.removeAttr('hidden', 'slow');
            }
            else
                startButtons($divButt);
        }
    }

    setDatepicker = function(o)
    {
        $('#' + o).find('.datepicker').datepicker($.datepicker.regional["@Model.Language.ToString(true)"]);
    }

    setFocus = function($ol)
    {
        $ol.find('li:eq(-1) div:first input:visible').trigger("focus");
    }

    hideButtons = function($divButt)
    {
        let $buttSave = $divButt.find('button[name$="Save"]');
        let $buttModify = $divButt.find('button[name$="Modify"]');
        let $buttAdd = $divButt.find('button[name$="Add"]');
        let $buttUndo = $divButt.find('button[name$="Undo"]');
        let $buttDelete = $divButt.find('button[name$="Delete"]');

        $buttModify.attr('hidden', 'slow');
        $buttAdd.attr('hidden', 'slow');
        $buttSave.attr('hidden', 'slow');
        $buttUndo.attr('hidden', 'slow');
        $buttDelete.attr('hidden', 'slow');
    }

    startButtons = function($divButt)
    {
        let $buttSave = $divButt.find('button[name$="Save"]');
        let $buttModify = $divButt.find('button[name$="Modify"]');
        let $buttAdd = $divButt.find('button[name$="Add"]');
        let $buttUndo = $divButt.find('button[name$="Undo"]');
        let $buttDelete = $divButt.find('button[name$="Delete"]');

        $buttModify.removeAttr('hidden', 'slow');
        if ($buttAdd !== undefined) $buttAdd.removeAttr('hidden', 'slow');
        $buttSave.attr('hidden', 'slow');
        $buttUndo.attr('hidden', 'slow');
        $buttDelete.attr('hidden', 'slow');
    }

    endButtons = function($divButt)
    {
        let $buttSave = $divButt.find('button[name$="Save"]');
        let $buttModify = $divButt.find('button[name$="Modify"]');
        let $buttAdd = $divButt.find('button[name$="Add"]');
        let $buttUndo = $divButt.find('button[name$="Undo"]');

        $buttModify.attr('hidden', 'slow');
        if ($buttAdd !== undefined) $buttAdd.attr('hidden', 'slow');
        $buttSave.removeAttr('hidden', 'slow');
        $buttUndo.removeAttr('hidden', 'slow');
    }

    addRow = function(index, o, row)
    {
        let $divButt = $('#' + o).closest('div');

        $('#' + o).hide();
        $('#' + o).append(row);
        $('#' + o).fadeIn('slow');

        setDatepicker(o);
        endButtons($divButt);
        setFocus($('#' + o));
    }

    undo = function(o, buttSave, index)
    {
        let index1 = parseInt(index) + 1;
        let o1 = o.substring(1);
        let idRow = $('ol li:nth-child(' + index1 + ') input:first-child').val();
        let $inputField = $('#' + o + ' li input');
        let $divButt = $('#' + o).closest('div');
        let rows = $('#' + o + ' li');

        rows.each(function(index)
        {
            if (o1 == 'Responsibilities')
            {
                $("[name='" + o1 + "[" + index + "].From']").val($("[id='" + o + "[" + index + "].From']").val());
                $("[name='" + o1 + "[" + index + "].To']").val($("[id='" + o + "[" + index + "].To']").val());
                $("[name='" + o1 + "[" + index + "].Description']").val($("[id='" + o + "[" + index + "].Description']").val());
                $allResponsibilityDatepicker.datepicker('destroy');
            }
            if (o1 == 'Texts')
            {
                $("[name='" + o1 + "[" + index + "].ISBN']").val($("[id='" + o + "[" + index + "].ISBN']").val());
                $("[name='" + o1 + "[" + index + "].Present']").val($("[id='" + o + "[" + index + "].Present']").val());
                $("[name='" + o1 + "[" + index + "].Published']").val($("[id='" + o + "[" + index + "].Published']").val());
                $allWorkDatepicker.datepicker('destroy');
            }
        })

        if (idRow == '') $('ol li:nth-child(' + index1 + ')').remove();
        $inputField.removeClass('selected', 'slow');
        $inputField.css({'cursor': "grab"});
        $inputField.attr("readonly", true);

        startButtons($divButt);
        clearValidate($('#' + o).closest('form'));
    }

    customValidate = function ()
    {
        let $rowR = $('#oResponsibilities li').toArray();
        let $rowW = $('#oTexts li').toArray();
        let $check = Boolean(true);

        $rowR.forEach((item) => {
            check = compareDateR($(item));
            if (!check) {
                let $feedback = $(item).find('div:first span');

                $feedback.html('@localizer["CompareDate"]');
                $feedback.show('slow');
                $check = check;
            };
        });
        $rowW.forEach((item) => {
            check = Boolean(compareDateW($(item)));
            if (!check) {
                let $feedback = $(item).find('div:eq(2) span');

                $feedback.html('@localizer["CompareDateArchived"]');
                $feedback.show('slow');
                $check = check;
            }
        });
        return $check;
    }

    compareDateR = function($item)
    {
        let $from = new Date($item.find('div:first input').val());
        let $to = $item.find('div:eq(1) input').val();
        
        if ($to === "") return true;
        return $from.getTime() <= (new Date ($to)).getTime();
    }
    
    compareDateW = function($item)
    {
        let $archived = new Date($item.find('div:eq(2) input').val());
        let $published = $item.find('div:eq(3) input').val();
        
        if ($published === "") return true;
        return (new Date ($published)).getTime() <= $archived.getTime();
    }

</script>