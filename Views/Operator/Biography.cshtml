@using Microsoft.AspNetCore.Mvc.Localization
@using WebAPP.Infrastructure.GlobalParameters
@using WebApp.Infrastructure.Models.dto
@using WebAPP.Infrastructure.Models.enums
@using System.Globalization
@using WebAPP.Infrastructure.Utilities;
@inject IViewLocalizer localizer
@inject IConfiguration Config
@model BiographyDto

<article>
    <input type="hidden" asp-for="@Model.Id" />
    <div class="d-flex flex-row">
        <div class="p-2 d-flex flex-column">
            <img src="~/Images/leaves.jpg" alt="Immagine dell'autore" />
            <div>
                <input type="hidden" asp-for="@Model.Author.Id" />
                <input type="hidden" asp-for="@Model.Author.FC" />
                <div><b>@localizer["BirthDay"]</b><br /><input asp-for="@Model.Author.BirthDay" class="border-0" /></div>
                <div><b>Email</b><br /><input asp-for="@Model.Author.Email" class="border-0" /></div>
                <div><b>@localizer["WorkPlace"]</b><br /><input asp-for="@Model.Author.WorkPlace" class="border-0" /></div>
                <div><b>@localizer["WorkAddress"]</b><br /><input asp-for=" @Model.Author.WorkAddress" class="border-0" /></div>
                <div><b>@localizer["Nationality"]</b><br /><input asp-for="@Model.Author.Nationality" class="border-0" /></div>
            </div>
        </div>
        <div class="d-flex flex-column w-100 form-group">
            <div class="p-2">
                <h3>
                @if (Model.Author.Title is not null)
                {
                    <input type="hidden" asp-for="@Model.Author.Title!.Id" />
                    <input type="text" asp-for="@Model.Author.Title!.Description" class="border-0" readonly />
                }
                &nbsp;<input type="text" asp-for="@Model.Author.Name" class="border-0" readonly />
                &nbsp;<input type="text" asp-for="@Model.Author.Surname" class="border-0" readonly />
                </h3>
            </div>
            <div class="p-2">
                @* .AspNetCore.Culture è il nome di default assegnato al cookie del locale scelto *@
                <p id="pText"><textarea class="border-0 w-100" asp-for="@Model.Text" readonly value="@Model.Text" spellcheck="false"></textarea></p>
                @if(Model.Profile != ProfileItems.User)
                {
                    <div class="d-flex flex-row-reverse"><button id="btnText" type="button" class="btn btn-link text-decoration-none">@localizer["Modify"]</button></div>
                    <div class="d-flex flex-row-reverse"><button id="btnTextSave" asp-controller="Operator" asp-action="UpdateBiography" hidden type="submit" class="btn btn-link text-decoration-none">@localizer["Save"]</button></div>
                }
            </div>

            <div class="p-2"><h4>@localizer["Responsibility"]</h4></div>
            <div class="w-100 p-2">
                <ol id="oResponsibility" class="nav list-group list-group-numbered input-group date">
                    @{
                        int index = 0;
                        foreach (var r in Model.Responsibilities)
                        {
                            <li class="w-100 d-flex flex-row list-group-item">
                                @if (r.From is not null)
                                {
                                    <input type="hidden" asp-for="@Model.Responsibilities[index].Biography" value="@Model.Id" />
                                    <input type="hidden" asp-for="@Model.Responsibilities[index].Id" value="@r.Id" />
                                    <p class="px-2"><input asp-for="@Model.Responsibilities[index].From" class="border-0 slimInputText datepicker" readonly value="@r.From" /></p>
                                    <p>&nbsp;-&nbsp;</p>
                                    <p class="px-2"><input asp-for="@Model.Responsibilities[index].To" class="border-0 slimInputText datepicker" readonly value="@r.To" /></p>
                                    <p class="px-2 w-100"><input asp-for="@Model.Responsibilities[index].Description" class="border-0 w-100" readonly value="@r.Description" /></p>
                                }
                            </li>
                            index++;
                        }
                    }
                </ol>
                @if (Model.Profile != ProfileItems.User)
                {
                    <div class="d-flex flex-row-reverse"><button id="btnResponsibility" type="button" class="btn btn-link text-decoration-none">@localizer["Modify"]</button></div>
                    <div class="d-flex flex-row-reverse"><button id="btnResponsibilitySave" type="submit" asp-controller="Operator" asp-action="UpdateBiography" hidden class="btn btn-link text-decoration-none">@localizer["Save"]</button></div>
                }
            </div>
            <div class="p-2"><h4>@localizer["Works"]</h4></div>
            <div class="w-100 p-2">
                <ol id="oWorks" class="nav list-group list-group-numbered">
                    @foreach (var t in Model.Texts)
                    {
                        <li class="w-100 d-flex flex-row list-group-item">
                            <input type="hidden" value="@t.Id" />
                            <a class="px-2 text-decoration-none" href="~/StaticFiles/@(t.Id).pdf" target="_blank">@(t.Title)</a>.&nbsp;
                            <p>@(string.IsNullOrEmpty(t.ISBN) ? string.Empty : $"{t.ISBN}")</p>
                            <p>.&nbsp;Present in database from:&nbsp;</p>
                            <p>@(t.Present.ToString())</p>
                            <p>&nbsp;Publish date:&nbsp;</p>
                            <p>@(t.Published is null ? string.Empty : $"{t.Published.ToString()}.")</p>
                        </li>
                    }
                </ol>
                @if (Model.Profile != ProfileItems.User)
                {
                    <div class="d-flex flex-row-reverse"><button id="btnWorks" type="button" class="btn btn-link text-decoration-none">@localizer["Modify"]</button></div>
                }

                <div class='col-sm-6'>
                    <div class="form-group">
                        <div class='input-group date' id='datetimepicker1'>
                            <input type='text' class="form-control" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="d-flex flex-row"></div>
    </div>
    <p class="warningMessage">@(Model.Errors == null ? string.Empty : Model.Errors[0])</p>
</article>

<script type="text/javascript">
    $(function () {
        waitingDialog.show();
        
        $("#btnText").on('click', function () {
            $("#pText > textarea").removeAttr('readonly').toggleClass('selected').focus();
            $("#btnText").hide('slow');
            $("#btnTextSave").removeAttr('hidden', 'slow');
        });

        $("#btnResponsibility").on('click', function (e) {
            $('#oResponsibility li input:visible').toggleClass('selected');
            $('#oResponsibility li input:visible:first').focus();
            $("#btnResponsibility").hide('slow');
            $("#btnResponsibilitySave").removeAttr('hidden', 'slow');
        });

        // if (document.referrer.match("/http://(www.)?index(/)?(.*)?/gi") == false)
        // {
            $('#oResponsibility li').each(function (e) {
                $(this).find('p').on("keypress", ":input", function (e) {
                    if (e.which == 13) {
                        updateBiography();
                        // Il problema insoluto è che return true ricarica non la pagina Biography ma la Index di provenienza, o meglio, la pagina chiamante quella attuale.
                        // La proprietà che, probabilmente, è usata per il reload è HTMLdocument.referrer ma è readonly.
                        // E' sempre caricata con l'indirizzo della pagina chiamante della attuale ma se la pagina è richiamata ad esempio con un bookmark essa è null.
                        // La soluzione consiste nel richiamare la pagina non appena l'utente clicca sul bottone (unico) di richiesta modifiche.  In questo modo il referrer diviene la pagina stessa.
                        return true;
                    }
                });
            });
            $('.datepicker').datepicker($.datepicker.regional["@Model.Language.ToString(true)"]);
        // }

        $("#btnWorks").on('click', function () {
            $('#oWorks li').each(function (e) {
                $(this).toggleClass('selected');

                $(this).find('p:first').hide();
                let text = $(this).find('p:first').text();
                let html = '<input type="text" class="w-70" placeholder="From" value="' + text + '"></input>';
                $(this).find('p:first').html(html);
                $(this).find('p:first').show('slow');
            });
        });

        setTimeout(function () { waitingDialog.hide(); }, 2000);
    });

    $("#btnResponsibility").on("click", function () {
        $("#oResponsibility").find("input").not('.datepicker').prop('readonly', false);
    })

    function updateBiography() {
        // Tutta la biografia è caricata anche quelle parti non modificate dall'utente
        let updateBiographyReturn = true;
        let titleDto = {
            Id: "@(Model.Author.Title is null ? string.Empty : Model.Author.Title!.Id)",
            Description: "@(Model.Author.Title is null ? string.Empty : Model.Author.Title!.Description)"
        };
        let authorDto = {
            Id: "@Model.Author.Id",
            Name: "@Model.Author.Name",
            Surname: "@Model.Author.Surname",
            Title: titleDto,
            Email: "@Model.Author.Email",
            WorkPlace: "@Model.Author.WorkPlace",
            WorkAddress: "@Model.Author.WorkAddress",
            BirthDay: "@Model.Author.BirthDay",
            FC: "@Model.Author.FC",
            Nationality: "@Model.Author.Nationality"
        };
        let authors = [];
        let responsibilityDto = [];
        let textDto = [];
        let language = Boolean("@(Model.Language == Languages.English)" == "False" ? false : true);

        authors.push(authorDto);

        $('#oResponsibility li').each(function () {
            let responsibility = {
                Author: "@Model.Author.Id",
                Id: $(this).find("input[type='hidden']").val(),
                From: $(this).find("p:first input").length ? $(this).find("p:first input").val() : "@Model.Text",
                To: $(this).find('p:nth-child(4) input').length ? $(this).find('p:nth-child(4) input').val() : "@Model.Text",
                Description: (language && $(this).find('p:last input').length) ? $(this).find('p:last input').val() : '',
                DescriptionIt: (!language && $(this).find('p:last input').length) ? $(this).find('p:last input').val() : ''
            }
            responsibilityDto.push(responsibility);
        });

        $('#oWorks li').each(function (e) {
            let text = {
                Id: $(this).find("input[type='hidden']").val(),
                Title: $(this).find('a').text(),
                ISBN: $(this).find('p:first').text(),
                Archive: 1,                                                 // da sistemare
                Present: $(this).find('p:nth-child(5)').text(),
                Published: $(this).find('p:last').text(),
                Authors: authors                                            // Eventuali altri autori sono volutamente non caricati
            }
            textDto.push(text);
        });

        let biographyDto = new token("@Model.Login", "@Model.Password", "@Model.Profile", "@Model.RequestVerificationToken", "@Model.Cookie", "@Model.JwtToken"); 
        biographyDto.Id = "@Model.Id";
        biographyDto.Author = authorDto;
        biographyDto.Responsibilities = responsibilityDto;
        biographyDto.Texts = textDto;
        biographyDto.Text = (language && $("#tText").length) ? $("#tText").val() : "@Model.Text";

        $.ajax({
            url: "UpdateBiography",
            type: 'post',
            async: false,
            data: biographyDto
        }).fail(function (jqXHR) {
            let biographyDto = $.parseJSON(jqXHR.responseText);
            let message = "";
            jQuery.each(biographyDto.errors, function (i, val) {
                i = parseInt(i + 1);
                message = message + i + ". " + val + "<br>";
            });
            $(".warningMessage").html(message);
            updateBiographyReturn = false;
        })

        return updateBiographyReturn;
    }
</script>