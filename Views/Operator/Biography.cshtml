@using Microsoft.AspNetCore.Mvc.Localization
@using WebAPP.Infrastructure.GlobalParameters
@using WebApp.Infrastructure.Models.dto
@using WebAPP.Infrastructure.Models.enums
@using System.Globalization
@inject IViewLocalizer localizer
@inject IConfiguration Config
@model BiographyDto

<article>
    <div class="d-flex flex-row">
        <div class="p-2 d-flex flex-column">
            <img src="~/Images/leaves.jpg" alt="Immagine dell'autore" />
            <div>
                <div><b>@localizer["BirthDay"]</b><br />@Model.Author.BirthDay</div>
                <div><b>Email</b><br />@Model.Author.Email</div>
                <div><b>@localizer["WorkPlace"]</b><br />@Model.Author.WorkPlace</div>
                <div><b>@localizer["WorkAddress"]</b><br />@Model.Author.WorkAddress</div>
                <div><b>@localizer["Nationality"]</b><br />@Model.Author.Nationality</div>
            </div>
        </div>
        <div class="d-flex flex-column w-100 form-group">
            <div class="p-2"><h3>@(Model.Author.Title is null ? string.Empty : Model.Author.Title!.Description) @Model.Author.Name @Model.Author.Surname</h3></div>
            <div class="p-2">
                @* .AspNetCore.Culture è il nome di default assegnato al cookie del locale scelto *@
                <p id="pText">@(Program.Language == "en" ? Model.Text : Model.TextIt)</p>
                @if(Model.Profile != ProfileItems.User)
                {
                    <div class="d-flex flex-row-reverse"><button id="btnText" type="button" class="btn btn-link text-decoration-none">@localizer["Modify"]</button></div>
                }
            </div>

            <div class="p-2"><h4>@localizer["Responsibility"]</h4></div>
            <div class="w-100 p-2">
                <ol id="oResponsibility" class="nav list-group list-group-numbered input-group date">
                    @foreach (var r in Model.Responsibilities)
                    {
                        <li class="w-100 d-flex flex-row list-group-item">
                            @if (r.From is not null)
                                {
                                    <input type="hidden" value="@r.Id" />
                                    <p class="px-2">@(r.From.Value)</p>
                                    <p>&nbsp;-&nbsp;</p>
                                    <p class="px-2">@(r.To is not null ? $"{r.To.Value} " : "...")</p>
                                    <p class="px-2 w-100">@(Program.Language == "en" ? r.Description : r.DescriptionIt)</p>
                                }
                        </li>
                    }
                </ol>
                @if (Model.Profile != ProfileItems.User)
                {
                    <div class="d-flex flex-row-reverse"><button id="btnResponsibility" type="button" class="btn btn-link text-decoration-none">@localizer["Modify"]</button></div>
                }
            </div>
            <div class="p-2"><h4>@localizer["Works"]</h4></div>
            <div class="w-100 p-2">
                <ol id="oWorks" class="nav list-group list-group-numbered">
                    @foreach (var t in Model.Texts)
                    {
                        <li class="w-100 d-flex flex-row list-group-item">
                            <input type="hidden" value="@t.Id" />
                            <a class="px-2 text-decoration-none" href="~/StaticFiles/@(t.Id).pdf" target="_blank">@(t.Title)</a>.&nbsp;
                            <p>@(string.IsNullOrEmpty(t.ISBN) ? string.Empty : $"{t.ISBN}")</p>
                            <p>.&nbsp;Present in database from:&nbsp;</p>
                            <p>@(t.Present.ToString())</p>
                            <p>&nbsp;Publish date:&nbsp;</p>
                            <p>@(t.Published is null ? string.Empty : $"{t.Published.ToString()}.")</p>
                        </li>
                    }
                </ol>
                @if (Model.Profile != ProfileItems.User)
                {
                    <div class="d-flex flex-row-reverse"><button id="btnWorks" type="button" class="btn btn-link text-decoration-none">@localizer["Modify"]</button></div>
                }

                <div class='col-sm-6'>
                    <div class="form-group">
                        <div class='input-group date' id='datetimepicker1'>
                            <input type='text' class="form-control" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="d-flex flex-row"></div>


    </div>

    <p class="warningMessage">@(Model.Errors == null ? string.Empty : Model.Errors[0])</p>
</article>

<script type="text/javascript">
    $(function () {
        waitingDialog.show();

        $("#btnText").on('click', function () {
            $("#pText").toggleClass('filedSelected');

            $("#pText").hide();
            let text = $("#pText").text();
            let html = '<textarea id="tText" class="form-control" style="margin:5px" cols=160 rows=20>' + text + '</textarea>'
            $("#pText").html(html);
            $("#pText").show("slow");
        });

        $("#btnResponsibility").on('click', function () {
            $('#oResponsibility li').each(function (e) {
                $(this).toggleClass('filedSelected');

                $(this).find('p:first').hide();
                let text = $(this).find('p:first').text();
                let html = '<input type="text" class="datepicker SlimInputText form-control" placeholder="From" value="' + text + '"></input>';
                $(this).find('p:first').html(html);
                $(this).find('p:first').show('slow');
               
                $(this).find('p:nth-child(4)').hide();
                text = $(this).find('p:nth-child(4)').text();
                html = '<input type="text" class="datepicker SlimInputText form-control" placeholder="To" value="' + text + '"></input>';
                $(this).find('p:nth-child(4)').html(html);
                $(this).find('p:nth-child(4)').show('slow');

                $(this).find('p:last').hide();
                text = $(this).find('p:last').text();
                html = '<input type="text" class="w-100 form-control" placeholder="Description" value="' + text + '"></input>';
                $(this).find('p:last').html(html);
                $(this).find('p:last').show('slow');

                $(this).find('p').on("keypress", ":input", function (e) {
                    if (e.which == 13) return updateBiography();
                });
            });
            $('.datepicker').datepicker($.datepicker.regional["@(Program.Language == "en" ? "" : Program.Language)"]);
        });

        $("#btnWorks").on('click', function () {
            $('#oWorks li').each(function (e) {
                $(this).toggleClass('filedSelected');

                $(this).find('p:first').hide();
                let text = $(this).find('p:first').text();
                let html = '<input type="text" class="w-70" placeholder="From" value="' + text + '"></input>';
                $(this).find('p:first').html(html);
                $(this).find('p:first').show('slow');
            });
        });

        setTimeout(function () { waitingDialog.hide(); }, 2000);
    });

    function updateBiography() {
        // Tutta la biografia è caricata anche quelle parti non modificate dall'utente
        let titleDto = {
            Id: "@(Model.Author.Title is null ? string.Empty : Model.Author.Title!.Id)",
            Description: "@(Model.Author.Title is null ? string.Empty : Model.Author.Title!.Description)"
        };

        let authorDto = {
            Id: "@Model.Author.Id",
            Name: "@Model.Author.Name",
            Surname: "@Model.Author.Surname",
            Title: titleDto,
            Email: "@Model.Author.Email",
            WorkPlace: "@Model.Author.WorkPlace",
            WorkAddress: "@Model.Author.WorkAddress",
            BirthDay: "@Model.Author.BirthDay",
            FC: "@Model.Author.FC",
            Nationality: "@Model.Author.Nationality"
        };
        let authors = [];
        let responsibilityDto = [];
        let textDto = [];
        let language = Boolean("@(Program.Language == "en")" == "False" ? false : true);

        authors.push(authorDto);

        $('#oResponsibility li').each(function () {
            let responsibility = {
                Author: "@Model.Author.Id",
                Id: $(this).find("input[type='hidden']").val(),
                From: $(this).find("p:first input").length ? $(this).find("p:first input").val() : "@Model.Text",
                To: $(this).find('p:nth-child(4) input').length ? $(this).find('p:nth-child(4) input').val() : "@Model.Text",
                Description: (language && $(this).find('p:last input').length) ? $(this).find('p:last input').val() : '',
                DescriptionIt: (!language && $(this).find('p:last input').length) ? $(this).find('p:last input').val() : ''
            }
            responsibilityDto.push(responsibility);
        });

        $('#oWorks li').each(function (e) {
            let text = {
                Id: $(this).find("input[type='hidden']").val(),
                Title: $(this).find('a').text(),
                ISBN: $(this).find('p:first').text(),
                Archive: 1,                                                 // da sistemare
                Present: $(this).find('p:nth-child(5)').text(),
                Published: $(this).find('p:last').text(),
                Authors: authors                                            // Eventuali altri autori sono volutamente non caricati
            }
            textDto.push(text);
        });

        let biographyDto = new token("@Model.Login", "@Model.Password", "@Model.Profile", "@Model.RequestVerificationToken", "@Model.Cookie", "@Model.JwtToken"); 
        biographyDto.Id = "@Model.Id";
        biographyDto.Author = authorDto;
        biographyDto.Responsibilities = responsibilityDto;
        biographyDto.Texts = textDto;
        biographyDto.Text = (language && $("#tText").length) ? $("#tText").val() : "@Model.Text";
        biographyDto.TextIt = (!language && $("#tText").length) ? $("#tText").val() : "@Model.TextIt";

        $.ajax({
            url: "UpdateBiography",
            type: 'post',
            async: false,
            data: biographyDto
        }).fail(function (jqXHR) {
            let biographyDto = $.parseJSON(jqXHR.responseText);
            let message = "";
            jQuery.each(biographyDto.errors, function (i, val) {
                i = parseInt(i + 1);
                message = message + i + ". " + val + "<br>";
            });
            $(".warningMessage").html(message);
            updateAccountReturn = false;
        });

    }
</script>