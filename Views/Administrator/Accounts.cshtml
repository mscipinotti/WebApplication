@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer localizer
@inject IConfiguration Config
@model WebAPP.Infrastructure.Models.AccountsDto

<input type="hidden" asp-for=Login value="@Model.Login" />
<input type="hidden" asp-for=Password value="@Model.Password" />
<input type="hidden" asp-for=Profile value="@Model.Profile" />
<input type="hidden" asp-for=Cookie value="@Model.Cookie" />
<input type="hidden" asp-for=RequestVerificationToken value="@Model.RequestVerificationToken" />
<input type="hidden" asp-for=JwtToken value="@Model.JwtToken" />

<div class="text-center">
    <h3>@localizer["PageTitle"]</h3>
</div>

<div style="display: flex">
    <nav class="nav flex-column">
        <a class="nav-link active" href="#" onclick="addRow();">@localizer["Add"]</a>
        <a id="delete" class="nav-link" href="#modalRequest" data-toggle="modal" data-target="#modalRequest">@localizer["Delete"]</a>
    </nav>
    <article>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Email</th>
                    <th scope="col"><div data-toggle="tooltip" data-placement="top" title="max 24 chars">@localizer["Name"]</div></th>
                    <th scope="col"><div data-toggle="tooltip" data-placement="top" title="max 24 chars">@localizer["Surname"]</div></th>
                    <th scope="col"><div data-toggle="tooltip" data-placement="top" title="16 chars requested">@localizer["FiscalCode"]</div></th>
                    <th scope="col"><div data-toggle="tooltip" data-placement="top" title="min 15 years">@localizer["Age"]</div></th>
                    <th scope="col"><div data-toggle="tooltip" data-placement="top" title="min 8 chars">Password</div></th>
                    <th scope="col"><div data-toggle="tooltip" data-placement="top" title="not before today">@localizer["ExpirationDate"]</div></th>
                    <th scope="col">@localizer["Status"]</th>
                    <th scope="col">@localizer["Profile"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var a in Model.Accounts)
                {
                    <tr>
                        <th scope="row">@(Model.Accounts.IndexOf(a) + 1)</th>
                        <td class="hugeInputText" style="cursor:grab">@a.Email</td>
                        <td class="inputText">@a.Name</td>
                        <td class="inputText">@a.Surname</td>
                        <td class="midInputText">@a.FC</td>
                        <td class="slimInputText">@a.Age</td>
                        <td class="inputText">********
                            <input type="hidden" id="@a.Email" value="@a.Password" />
                        </td>
                        <td class="slimInputText">@a.ExpirationDate</td>
                        <td class="midInputText">
                            <div class="dropdown">
                                <a class="btn dropdown-toggle" type="button" role="button" href="#" data-toggle="dropdown" data-itemid="@Convert.ToByte(a.Status)" aria-haspopup="true" aria-expanded="false">@a.Status</a>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" data-itemid="0">Inactive</a></li>
                                    <li><a class="dropdown-item" href="#" data-itemid="1">Active</a></li>
                                    <li><a class="dropdown-item" href="#" data-itemid="2">ChangePassword</a></li>
                                </ul>
                            </div>
                        </td>
                        <td class="midInputText">
                            <div class="dropdown">
                                <a class="btn dropdown-toggle" type="button" role="button" href="#" data-toggle="dropdown" data-itemid="@Convert.ToByte(a.Profile)" aria-haspopup="true" aria-expanded="false">@a.Profile</a>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" data-itemid="0">Administrator</a></li>
                                    <li><a class="dropdown-item" href="#" data-itemid="1">Operator</a></li>
                                    <li><a class="dropdown-item" href="#" data-itemid="2">User</a></li>
                                </ul>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <p class="warningMessage"></p>
    </article>
</div>

<script type="text/javascript">
    $(function () {
        $("td:nth-child(2)").on('click', function () {
            if ($(this).text() == "@Config.GetValue(typeof(string), "MasterAdministrator")") return;
            $("table").hide();
            $(this).parent()
                   .toggleClass('rowSelected')
                   .find('td').each(function (index) {
                        if (index <= 0 || index >= 7) return;
                        let e = $(this).find("input").not(':input[type=hidden]');
                        let l = ["inputText", "inputText", "midInputText", "slimInputText", "inputText", "slimInputText"];
                        let p = ["Name", "Surname", "Fiscale Code", "Age", "Password", "Expiration Date"];
                        let t = ["text", "text", "text", "number", "text", "date"];
                        let data = index == 5 ? "********" : $(this).text();
                        let itemid = "";
                        if (index == 6) {
                            // Il formato delle date sul browser deve essere italiano
                            let tmpDate = new Date($(this).text().substr(6, 4), parseInt($(this).text().substr(3, 2)) - 1, $(this).text().substr(0, 2));
                            data = tmpDate.getFullYear() + '-' + (tmpDate.getMonth() + 1).toString().padStart(2, '0') + '-' + tmpDate.getDate().toString().padStart(2, '0');
                        }
                        if (e.length == 0) {
                            let html = '<input type="' + t[index - 1] + '" class="' + l[index - 1] + '" placeholder="' + p[index - 1] + '" value="' + data + '" />';
                            $(this).html(html);
                        }
                        else {
                            // Ritorno a riga non selezionata
                            $(this).html(index == 5 ? data : e.val());
                            e.remove();
                        }
                   });
            $("table").show("slow");
        });
        
        $("#delete").on('click', function () {
            $('.modal-body p').html("@localizer["DeleteQuestion"]");
            $('.modal-header h5').html("@localizer["Title"]");
        });

        // https://learn.jquery.com/events/event-delegation/
        // Event delegation. Problema: aggiungere il click event alla riga dinamicamente creata. Si usa
        // $("selector 1").on("click", "selector 2", function)
        // Il selector 1 deve esistere sempre (già prima della aggiunta dinamica). Il selector 2 deve essere figlio del primo e dinamicamente creato.
        $("tbody").on('click', 'tr.rowSelected .dropdown-menu .dropdown-item', function () {
            $(this).closest(".dropdown")
                   .find("a:first")
                   .data('itemid', $(this).data('itemid'))
                   .text($(this).text());
        });

        $("table tbody").on('keypress', function (e) {
            if (e.which == 13) return updateAccount();
        });

        let params = new URLSearchParams(document.location.search);
        @{
            string message = string.Empty;
            if (Model.Errors is not null) message = Model.Errors[0];
        }
        $(".warningMessage").html("@message" != "" ? "@message" : params.get("Error"));

    });

    function addRow() {
        $("#delete").attr('disabled', 'disabled');
        $("table").hide();

        let index = Number($('table > tbody:last-child > tr:last-child > th').text()) + 1;
        let email = '<input type="email" class="hugeInputText" contenteditable="true" placeholder="@localizer["Email"]" />';
        let name = '<input type="text" class="inputText" placeholder="Nome" />';
        let surname = '<input type="text" class="inputText" placeholder="Cognome" />';
        let fiscalCode = '<input type="text" class="midInputText" placeholder="codice fiscale" />';
        let age = '<input type="text" class="slimInputText" placeholder="età" />';
        let password = '<input type="password" class="inputText" placeholder="password" />';
        let expirationDate = '<input type="date" class="slimInputText" value="expirationDate" />';
        let status = '<div class="dropdown">' +
                        '<a class="btn dropdown-toggle" type = "button" role = "button" href = "#" data-toggle="dropdown" data-itemid="" aria-haspopup="true" aria-expanded="false">Inactive</a>' +
                        '<ul class="dropdown-menu">' +
                            '<li><a class="dropdown-item" href = "#">Inactive</a></li>' +
                            '<li><a class="dropdown-item" href = "#">Active</a></li>' +
                            '<li><a class="dropdown-item" href = "#">ChangePassword</a></li>' +
                        '</ul>' +
                    '</div>';
        let profile = '<div class="dropdown">' +
                        '<a class="btn dropdown-toggle" type = "button" role = "button" href = "#" data-toggle="dropdown" data-itemid="" aria-haspopup="true" aria-expanded="false">Administrator</a>' +
                        '<ul class="dropdown-menu">' +
                        '<li><a class="dropdown-item" href = "#">Administrator</a></li>' +
                        '<li><a class="dropdown-item" href = "#">Operator</a></li>' +
                        '<li><a class="dropdown-item" href = "#">User</a></li>' +
                        '</ul>' +
                        '</div>';
        $('table > tbody:last-child').append('<tr class="rowSelected">                                  \
                                                <th scope="row">' + index + '</th>                      \
                                                <td class="hugeInputText">' + email + '</td>            \
                                                <td class="inputText">' + name + '</td>                 \
                                                <td class="inputText">' + surname + '</td>              \
                                                <td class="midInputText">' + fiscalCode + '</td>        \
                                                <td class="slimInputText">' + age + '</td>              \
                                                <td class="inputText">' + password + '</td>             \
                                                <td class="slimInputText">' + expirationDate + '</td>   \
                                                <td class="midInputText">' + status + '</td>            \
                                                <td class="midInputText">' + profile + '</td>           \
                                              </tr>');
        $("table").fadeIn("slow");
        return true;
    }

    function updateAccount() {
        let updateAccountReturn = true;
        let row = 0;
        let text;
        let accountsDto = {
            Login: "@Model.Login",
            Password: "@Model.Password",
            Profile: "@Model.Profile",
            RequestVerificationToken: "@Model.RequestVerificationToken",
            Cookie: "@Model.Cookie",
            JwtToken: "@Model.JwtToken",
            Accounts: []
        };

        $('table > tbody:last-child > tr.rowSelected').each(function (e) {
            waitingDialog.show();

            let accountDto = { };
            if ($(this).find('td input').not(':input[type=hidden]').length == 7) {
                // Add. Il numero dei campi di input sono 7
                $(this).find('td input').not(':input[type=hidden]').each(function (index) {
                    switch (index) {
                        case 0: accountDto.Email = $(this).val();
                            break;
                        case 1: accountDto.Name = $(this).val();
                            break;
                        case 2: accountDto.Surname = $(this).val();
                            break;
                        case 3: accountDto.FC = $(this).val();
                            break;
                        case 4: accountDto.Age = $(this).val();
                            break;
                        case 5: accountDto.Password = $(this).val();
                            break;
                        case 6: accountDto.ExpirationDate = $(this).val();
                            break;
                    }
                });
                text = $(this).find('td div:first > a').html();
                $.each($(this).find('td div:first > ul li a'), function (index, item) {
                    if (item.innerHTML == text) accountDto.Status = parseInt(index) + 1;
                });

                text = $(this).find('td div:last > a').html();
                $.each($(this).find('td div :last> ul li a'), function (index, item) {
                    if (item.innerHTML == text) accountDto.Profile = parseInt(index) + 1;
                });
            }
            else
            {
                // Modify. Il numero dei campi di input sono 6 (email non modificabile).
                accountDto.Email = $(this).find('td.hugeInputText').html();
                $(this).find('td input').each(function (index) {
                    switch (index) {
                        case 0: accountDto.Name = $(this).val();
                            break;
                        case 1: accountDto.Surname = $(this).val();
                            break;
                        case 2: accountDto.FC = $(this).val();
                            break;
                        case 3: accountDto.Age = $(this).val();
                            break;
                        case 4: accountDto.Password = $(this).val();
                            break;
                        case 5: accountDto.ExpirationDate = $(this).val();
                            break;
                    }
                });
                text = $(this).find('td div:first > a').html();
                $.each($(this).find('td div:first > ul li a'), function (index, item) {
                    if (item.innerHTML == text) accountDto.Status = text;
                });

                text = $(this).find('td div:last > a').html();
                $.each($(this).find('td div:last > ul li a'), function (index, item) {
                    if (item.innerHTML == text) accountDto.Profile = text;
                });
            }
            accountsDto.Accounts.push(accountDto);
            row = row + 1;
        });

        $.ajax({
            url: "UpdateAccounts",
            type: 'post',
            dataType: 'json',
            async: false,                                           // Non rimuovere, in errore se async = true
            data: JSON.stringify(accountsDto),
            contentType: 'application/json; charset=utf-8'
        }).fail(function (jqXHR) {
            let accountsDto = $.parseJSON(jqXHR.responseText);
            let message = "";
            jQuery.each(accountsDto.errors, function (i, val) {
                i = parseInt(i + 1);
                message = message + i + ". " + val + "<br>";
            });
            $(".warningMessage").html(message);
            updateAccountReturn = false;
        });

        // Obbligatorio chiamare la chiusura dello spinner modale con il setTimeout altrimenti rimane visibile
        setTimeout(function () { waitingDialog.hide(); }, 2000);
        
        // Se true ricarica la pagina automaticamente perchè si trova in ready function ($(function () { ...)
        return updateAccountReturn;
    }

    function confirmed() {
        let delAccountReturn = true;
        let row = 0;
        let text;
        let accountsDto = {
            Login: "@Model.Login",
            Password: "@Model.Password",
            Profile: "@Model.Profile",
            RequestVerificationToken: "@Model.RequestVerificationToken",
            Cookie: "@Model.Cookie",
            JwtToken: "@Model.JwtToken",
            Accounts: []
        };

        $('table > tbody:last-child > tr.rowSelected').each(function (e) {
            waitingDialog.show();

            let text;
            let accountDto = {
                Email: $(this).find('td:first').html()
            };
            if ($(this).find('td input').length == 6) {
                // Solo account a DB presenti. L'utente può aver aperto una nuova riga per l'inserimento e poi cliccare delete
                $(this).find('td input').each(function (index) {
                    switch (index) {
                        case 0: accountDto.Name = $(this).val();
                            break;
                        case 1: accountDto.Surname = $(this).val();
                            break;
                        case 2: accountDto.FC = $(this).val();
                            break;
                        case 3: accountDto.Age = $(this).val();
                            break;
                        case 4: accountDto.Password = $(this).val();
                            break;
                        case 5: accountDto.ExpirationDate = $(this).val();
                            break;
                    }
                });

                text = $(this).find('td div:first > a').html();
                $.each($(this).find('td div:first > ul li a'), function (index, item) {
                    if (item.innerHTML == text) accountDto.Status = text;
                });

                text = $(this).find('td div:last > a').html();
                $.each($(this).find('td div:last > ul li a'), function (index, item) {
                    if (item.innerHTML == text) accountDto.Profile = text;
                });

                accountsDto.Accounts.push(accountDto);
                row = row + 1;
            }
        });

        $.ajax({
            url: "DeleteAccounts",
            type: 'post',
            dataType: 'json',
            data: JSON.stringify(accountsDto),
            contentType: 'application/json; charset=utf-8',
            success: function () {
                $('table > tbody:last-child > tr.rowSelected').each(function (e) {
                    $(this).fadeOut('slow', function () {
                        $(this).remove();
                    });
                });
                successAccountsDtoCallback();
                delAccountReturn = true;
            },
            error: function (accountsDto) {
                errorsAccountsDtoCallback(accountsDto);
                delAccountReturn = false;
            }
        });

        // Obbligatorio chiamare la chiusura dello spinner modale con il setTimeout altrimenti rimane visibile
        setTimeout(function () { waitingDialog.hide(); }, 2000);
        
        $('#modalRequest').modal('hide');

        return delAccountReturn;
    }

</script>